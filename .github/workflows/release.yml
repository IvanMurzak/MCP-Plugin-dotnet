name: release

on:
  push:
    branches:
      - main

jobs:
  check-version-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.current-version }}
      prev_tag: ${{ steps.prev_tag.outputs.tag }}
      tag_exists: ${{ steps.tag_exists.outputs.exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get version from package.json
        id: get_version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: Unity-MCP-Plugin/Assets/root

      - name: Find previous version tag
        id: prev_tag
        uses: WyriHaximus/github-action-get-previous-tag@v1

      - name: Check if tag exists
        id: tag_exists
        uses: mukunku/tag-exists-action@v1.6.0
        with:
          tag: ${{ steps.get_version.outputs.current-version }}

  test:
    runs-on: ubuntu-latest
    needs: check-version-tag
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        working-directory: ./
        run: dotnet restore

      - name: Build
        working-directory: ./
        run: dotnet build --no-restore --configuration Release

      - name: Test
        working-directory: ./
        run: dotnet test --no-build --verbosity normal --configuration Release

  # release-at-github:
  #   runs-on: ubuntu-latest
  #   needs: [
  #     check-version-tag,
  #     test
  #   ]
  #   if: needs.check-version-tag.outputs.tag_exists == 'false'
  #   outputs:
  #     version: ${{ needs.check-version-tag.outputs.version }}
  #     success: ${{ steps.rel_desc.outputs.success }}
  #     release_notes: ${{ steps.rel_desc.outputs.release_body }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         fetch-tags: true

  #     - name: Generate release description
  #       id: rel_desc
  #       env:
  #         GH_TOKEN: ${{ github.token }}
  #       run: |
  #         set -e
  #         version=${{ needs.check-version-tag.outputs.version }}
  #         prev_tag=${{ needs.check-version-tag.outputs.prev_tag }}
  #         repo_url="https://github.com/${GITHUB_REPOSITORY}"
  #         today=$(date +'%B %e, %Y')

  #         echo "repo_url: $repo_url"
  #         echo "today: $today"

  #         echo "# MCP Plugin $version" > release.md
  #         echo "**Released:** *$today*" >> release.md

  #         echo "" >> release.md
  #         echo "---" >> release.md
  #         echo "" >> release.md

  #         if [ -n "$prev_tag" ]; then
  #           echo "## Comparison" >> release.md
  #           echo "See every change: [Compare $prev_tag...$version]($repo_url/compare/$prev_tag...$version)" >> release.md

  #           echo "" >> release.md
  #           echo "---" >> release.md
  #           echo "" >> release.md

  #           echo "## Commit Summary (Newest → Oldest)" >> release.md
  #           for sha in $(git log --pretty=format:'%H' $prev_tag..HEAD); do
  #             username=$(gh api repos/${GITHUB_REPOSITORY}/commits/$sha --jq '.author.login // .commit.author.name')
  #             message=$(git log -1 --pretty=format:'%s' $sha)
  #             short_sha=$(git log -1 --pretty=format:'%h' $sha)
  #             echo "- [\`$short_sha\`]($repo_url/commit/$sha) — $message by @$username" >> release.md
  #           done
  #         fi

  #         printf "release_body<<ENDOFRELEASEBODY\n%s\nENDOFRELEASEBODY\n" "$(cat release.md)" >> $GITHUB_OUTPUT
  #         echo "success=true" >> $GITHUB_OUTPUT

  #     - name: Create Tag and Release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: ${{ needs.check-version-tag.outputs.version }}
  #         name: ${{ needs.check-version-tag.outputs.version }}
  #         body: ${{ steps.rel_desc.outputs.release_body }}
  #         draft: false
  #         prerelease: false
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # deploy:
  #   needs: release-at-github
  #   if: needs.release-at-github.outputs.success == 'true'
  #   uses: ./.github/workflows/deploy.yml
  #   with:
  #     version: ${{ needs.release-at-github.outputs.version }}
  #   secrets: inherit